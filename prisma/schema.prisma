generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model articles {
  id                 Int                  @id @default(autoincrement())
  title              String               @db.VarChar(255)
  body               String
  date               DateTime             @db.Date
  author             String               @db.VarChar(50)
  image              String?              @db.VarChar(100)
  article_favourites article_favourites[]
}

model clients {
  id                 Int                  @id @default(autoincrement())
  first_name         String               @db.VarChar(50)
  last_name          String               @db.VarChar(50)
  email              String               @db.VarChar(255)
  password           String               @db.VarChar(255)
  phone_number       String?              @db.VarChar(50)
  address            String?              @db.VarChar(100)
  article_favourites article_favourites[]
  lawfirm_favourites lawfirm_favourites[]
  lawyer_favourites  lawyer_favourites[]
  messages           messages[]
}

model lawfirms {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.VarChar(50)
  email              String               @db.VarChar(50)
  description        String
  views              Int
  location           String               @db.VarChar(50)
  registration_date  DateTime             @db.Date
  phone_number       String               @db.VarChar(50)
  address            String               @db.VarChar(100)
  rating             Int
  profile_pic        String               @db.VarChar(100)
  lawfirm_favourites lawfirm_favourites[]
  lawfirm_members    lawfirm_members[]
  messages           messages[]
}

model lawyers {
  id                Int                 @id @default(autoincrement())
  first_name        String?             @db.VarChar(50)
  last_name         String?             @db.VarChar(50)
  email             String?             @db.VarChar(255)
  description       String?
  location          String?             @db.VarChar(50)
  education         String?
  views             Int?
  likes             Int?
  date_certified    DateTime?           @db.Date
  phone_number      String?             @db.VarChar(50)
  address           String?             @db.VarChar(100)
  rating            Int?
  profile_pic       String?             @db.VarChar(100)
  lawfirm_members   lawfirm_members[]
  lawyer_favourites lawyer_favourites[]
  lawyer_fields     lawyer_fields[]
  messages          messages[]
}

model messages {
  id          Int       @id @default(autoincrement())
  client_id   Int
  lawyer_id   Int?
  law_firm_id Int?
  body        String
  date_sent   DateTime  @db.Timestamptz(6)
  from_client Boolean?
  seen_client Boolean?
  clients     clients   @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lawfirms    lawfirms? @relation(fields: [law_firm_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lawyers     lawyers?  @relation(fields: [lawyer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model lawfirm_members {
  id         Int      @id @default(autoincrement())
  lawyer_id  Int
  lawfirm_id Int
  joined_on  DateTime @db.Date
  lawfirms   lawfirms @relation(fields: [lawfirm_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lawyers    lawyers  @relation(fields: [lawyer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model article_favourites {
  id           Int      @id @default(autoincrement())
  client_id    Int
  article_id   Int
  date_created DateTime @db.Timestamptz(6)
  articles     articles @relation(fields: [article_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  clients      clients  @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model lawyer_favourites {
  id           Int      @id @default(autoincrement())
  client_id    Int
  lawyer_id    Int
  date_created DateTime @db.Timestamptz(6)
  clients      clients  @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lawyers      lawyers  @relation(fields: [lawyer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model lawfirm_favourites {
  id           Int      @id @default(autoincrement())
  client_id    Int
  lawfirm_id   Int
  date_created DateTime @db.Timestamptz(6)
  clients      clients  @relation(fields: [client_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lawfirms     lawfirms @relation(fields: [lawfirm_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model fields_of_law {
  id            Int             @id @default(autoincrement())
  field         String
  lawyer_fields lawyer_fields[]
}

model lawyer_fields {
  id               Int           @id @default(autoincrement())
  lawyers_id       Int
  fields_of_law_id Int
  date_added       DateTime      @db.Date
  fields_of_law    fields_of_law @relation(fields: [fields_of_law_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lawyers          lawyers       @relation(fields: [lawyers_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
